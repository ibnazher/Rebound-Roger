@model Rebound.Models.Transaction

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="card border-info">
            <div class="card-header bg-white d-flex justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Get bills from customer</h6>
                <div>
                    <a href="@Url.Action("GetMonthlyBills","Customers")" class="btn btn-primary"><i class="fas fa-plus-circle"></i> Monthly Payment</a>
                    <a href="@Url.Action("Billing","Report")" class="btn btn-primary"><i class="fas fa-list-ul"></i> Transaction details</a>
                </div>
                
            </div>
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-sm-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Client, "Client", htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="col-md-12">
                                <input id="getCustomer" placeholder="Search for customer" class="form-control" />
                                @Html.HiddenFor(model => model.Client, new { htmlAttributes = new { @class = "form-control", @id="clientSave"  } })
                                @Html.ValidationMessageFor(model => model.Client, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            <label class="control-label col-md-12">Receive Amount</label>
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.DebitAmount, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DebitAmount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            <label class="control-label col-md-12">Return Amount</label>
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.CreditAmount, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CreditAmount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.Narration, htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Narration, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Narration, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="card-footer border-info bg-info">
                <div class="form-group">
                    <div class="col-md-12">
                        <input type="submit" class="btn btn-outline-light float-md-right" value="Create Transaction" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts{
    <script>
                $(function () {
                $("#getCustomer").autocomplete({
                    source: function (request, response) {
                         $.ajax({
                             url: '@Url.Action("GetCustomerData","Home")',
                             dataType: "json",
                             data: { search: $("#getCustomer").val(),request:1},
                             success: function (data) {
                                 if(!data.length){
                                    var result = [
                                        {
                                            label: 'No results found',
                                            value: response.term
                                        }
                                    ];
                                    response(result);
                                }
                                else{
                                  response($.map(data, function (item) {
                                     return { label: item.Code + " - " + item.FirstName +" " + item.LastName + " - " + item.Mobile, Id: item.Id };
                                 }))
                                }
                             }
                         })
                    },
                    minLength: 3,
                    select: function (event, ui) {
                        $(this).val(ui.item.label); // display the selected text
                        var id = ui.item.Id; // selected value
                        $("#Client").val(id);
                        alert(id);
                         return false;
                    }
                });
            });
    </script>
}